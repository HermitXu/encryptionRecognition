/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.spinfosec.parse.service.base.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-11-27")
public class ParseService {

  public interface Iface {

    public com.spinfosec.parse.bean.DetectResult detect(com.spinfosec.parse.bean.DetectParams detectParams) throws TException;

    public com.spinfosec.parse.bean.ParseResult parse(com.spinfosec.parse.bean.ParseParams parseParams) throws TException;

    public com.spinfosec.parse.bean.ExtractResult extract(com.spinfosec.parse.bean.ExtractParams extractParams) throws TException;

  }

  public interface AsyncIface {

    public void detect(com.spinfosec.parse.bean.DetectParams detectParams, AsyncMethodCallback resultHandler) throws TException;

    public void parse(com.spinfosec.parse.bean.ParseParams parseParams, AsyncMethodCallback resultHandler) throws TException;

    public void extract(com.spinfosec.parse.bean.ExtractParams extractParams, AsyncMethodCallback resultHandler) throws TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public com.spinfosec.parse.bean.DetectResult detect(com.spinfosec.parse.bean.DetectParams detectParams) throws TException
    {
      send_detect(detectParams);
      return recv_detect();
    }

    public void send_detect(com.spinfosec.parse.bean.DetectParams detectParams) throws TException
    {
      detect_args args = new detect_args();
      args.setDetectParams(detectParams);
      sendBase("detect", args);
    }

    public com.spinfosec.parse.bean.DetectResult recv_detect() throws TException
    {
      detect_result result = new detect_result();
      receiveBase(result, "detect");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "detect failed: unknown result");
    }

    public com.spinfosec.parse.bean.ParseResult parse(com.spinfosec.parse.bean.ParseParams parseParams) throws TException
    {
      send_parse(parseParams);
      return recv_parse();
    }

    public void send_parse(com.spinfosec.parse.bean.ParseParams parseParams) throws TException
    {
      parse_args args = new parse_args();
      args.setParseParams(parseParams);
      sendBase("parse", args);
    }

    public com.spinfosec.parse.bean.ParseResult recv_parse() throws TException
    {
      parse_result result = new parse_result();
      receiveBase(result, "parse");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "parse failed: unknown result");
    }

    public com.spinfosec.parse.bean.ExtractResult extract(com.spinfosec.parse.bean.ExtractParams extractParams) throws TException
    {
      send_extract(extractParams);
      return recv_extract();
    }

    public void send_extract(com.spinfosec.parse.bean.ExtractParams extractParams) throws TException
    {
      extract_args args = new extract_args();
      args.setExtractParams(extractParams);
      sendBase("extract", args);
    }

    public com.spinfosec.parse.bean.ExtractResult recv_extract() throws TException
    {
      extract_result result = new extract_result();
      receiveBase(result, "extract");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "extract failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void detect(com.spinfosec.parse.bean.DetectParams detectParams, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      detect_call method_call = new detect_call(detectParams, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class detect_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.spinfosec.parse.bean.DetectParams detectParams;
      public detect_call(com.spinfosec.parse.bean.DetectParams detectParams, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.detectParams = detectParams;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("detect", org.apache.thrift.protocol.TMessageType.CALL, 0));
        detect_args args = new detect_args();
        args.setDetectParams(detectParams);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.spinfosec.parse.bean.DetectResult getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_detect();
      }
    }

    public void parse(com.spinfosec.parse.bean.ParseParams parseParams, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      parse_call method_call = new parse_call(parseParams, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class parse_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.spinfosec.parse.bean.ParseParams parseParams;
      public parse_call(com.spinfosec.parse.bean.ParseParams parseParams, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.parseParams = parseParams;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("parse", org.apache.thrift.protocol.TMessageType.CALL, 0));
        parse_args args = new parse_args();
        args.setParseParams(parseParams);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.spinfosec.parse.bean.ParseResult getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_parse();
      }
    }

    public void extract(com.spinfosec.parse.bean.ExtractParams extractParams, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      extract_call method_call = new extract_call(extractParams, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class extract_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.spinfosec.parse.bean.ExtractParams extractParams;
      public extract_call(com.spinfosec.parse.bean.ExtractParams extractParams, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.extractParams = extractParams;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("extract", org.apache.thrift.protocol.TMessageType.CALL, 0));
        extract_args args = new extract_args();
        args.setExtractParams(extractParams);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.spinfosec.parse.bean.ExtractResult getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_extract();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("detect", new detect());
      processMap.put("parse", new parse());
      processMap.put("extract", new extract());
      return processMap;
    }

    public static class detect<I extends Iface> extends org.apache.thrift.ProcessFunction<I, detect_args> {
      public detect() {
        super("detect");
      }

      public detect_args getEmptyArgsInstance() {
        return new detect_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public detect_result getResult(I iface, detect_args args) throws TException {
        detect_result result = new detect_result();
        result.success = iface.detect(args.detectParams);
        return result;
      }
    }

    public static class parse<I extends Iface> extends org.apache.thrift.ProcessFunction<I, parse_args> {
      public parse() {
        super("parse");
      }

      public parse_args getEmptyArgsInstance() {
        return new parse_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public parse_result getResult(I iface, parse_args args) throws TException {
        parse_result result = new parse_result();
        result.success = iface.parse(args.parseParams);
        return result;
      }
    }

    public static class extract<I extends Iface> extends org.apache.thrift.ProcessFunction<I, extract_args> {
      public extract() {
        super("extract");
      }

      public extract_args getEmptyArgsInstance() {
        return new extract_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public extract_result getResult(I iface, extract_args args) throws TException {
        extract_result result = new extract_result();
        result.success = iface.extract(args.extractParams);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("detect", new detect());
      processMap.put("parse", new parse());
      processMap.put("extract", new extract());
      return processMap;
    }

    public static class detect<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, detect_args, com.spinfosec.parse.bean.DetectResult> {
      public detect() {
        super("detect");
      }

      public detect_args getEmptyArgsInstance() {
        return new detect_args();
      }

      public AsyncMethodCallback<com.spinfosec.parse.bean.DetectResult> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.spinfosec.parse.bean.DetectResult>() { 
          public void onComplete(com.spinfosec.parse.bean.DetectResult o) {
            detect_result result = new detect_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            detect_result result = new detect_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, detect_args args, AsyncMethodCallback<com.spinfosec.parse.bean.DetectResult> resultHandler) throws TException {
        iface.detect(args.detectParams,resultHandler);
      }
    }

    public static class parse<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, parse_args, com.spinfosec.parse.bean.ParseResult> {
      public parse() {
        super("parse");
      }

      public parse_args getEmptyArgsInstance() {
        return new parse_args();
      }

      public AsyncMethodCallback<com.spinfosec.parse.bean.ParseResult> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.spinfosec.parse.bean.ParseResult>() { 
          public void onComplete(com.spinfosec.parse.bean.ParseResult o) {
            parse_result result = new parse_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            parse_result result = new parse_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, parse_args args, AsyncMethodCallback<com.spinfosec.parse.bean.ParseResult> resultHandler) throws TException {
        iface.parse(args.parseParams,resultHandler);
      }
    }

    public static class extract<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, extract_args, com.spinfosec.parse.bean.ExtractResult> {
      public extract() {
        super("extract");
      }

      public extract_args getEmptyArgsInstance() {
        return new extract_args();
      }

      public AsyncMethodCallback<com.spinfosec.parse.bean.ExtractResult> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.spinfosec.parse.bean.ExtractResult>() { 
          public void onComplete(com.spinfosec.parse.bean.ExtractResult o) {
            extract_result result = new extract_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            extract_result result = new extract_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, extract_args args, AsyncMethodCallback<com.spinfosec.parse.bean.ExtractResult> resultHandler) throws TException {
        iface.extract(args.extractParams,resultHandler);
      }
    }

  }

  public static class detect_args implements org.apache.thrift.TBase<detect_args, detect_args._Fields>, java.io.Serializable, Cloneable, Comparable<detect_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("detect_args");

    private static final org.apache.thrift.protocol.TField DETECT_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("detectParams", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new detect_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new detect_argsTupleSchemeFactory());
    }

    public com.spinfosec.parse.bean.DetectParams detectParams; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DETECT_PARAMS((short)1, "detectParams");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DETECT_PARAMS
            return DETECT_PARAMS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DETECT_PARAMS, new org.apache.thrift.meta_data.FieldMetaData("detectParams", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.spinfosec.parse.bean.DetectParams.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(detect_args.class, metaDataMap);
    }

    public detect_args() {
    }

    public detect_args(
      com.spinfosec.parse.bean.DetectParams detectParams)
    {
      this();
      this.detectParams = detectParams;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public detect_args(detect_args other) {
      if (other.isSetDetectParams()) {
        this.detectParams = new com.spinfosec.parse.bean.DetectParams(other.detectParams);
      }
    }

    public detect_args deepCopy() {
      return new detect_args(this);
    }

    @Override
    public void clear() {
      this.detectParams = null;
    }

    public com.spinfosec.parse.bean.DetectParams getDetectParams() {
      return this.detectParams;
    }

    public detect_args setDetectParams(com.spinfosec.parse.bean.DetectParams detectParams) {
      this.detectParams = detectParams;
      return this;
    }

    public void unsetDetectParams() {
      this.detectParams = null;
    }

    /** Returns true if field detectParams is set (has been assigned a value) and false otherwise */
    public boolean isSetDetectParams() {
      return this.detectParams != null;
    }

    public void setDetectParamsIsSet(boolean value) {
      if (!value) {
        this.detectParams = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DETECT_PARAMS:
        if (value == null) {
          unsetDetectParams();
        } else {
          setDetectParams((com.spinfosec.parse.bean.DetectParams)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DETECT_PARAMS:
        return getDetectParams();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DETECT_PARAMS:
        return isSetDetectParams();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof detect_args)
        return this.equals((detect_args)that);
      return false;
    }

    public boolean equals(detect_args that) {
      if (that == null)
        return false;

      boolean this_present_detectParams = true && this.isSetDetectParams();
      boolean that_present_detectParams = true && that.isSetDetectParams();
      if (this_present_detectParams || that_present_detectParams) {
        if (!(this_present_detectParams && that_present_detectParams))
          return false;
        if (!this.detectParams.equals(that.detectParams))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_detectParams = true && (isSetDetectParams());
      list.add(present_detectParams);
      if (present_detectParams)
        list.add(detectParams);

      return list.hashCode();
    }

    @Override
    public int compareTo(detect_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDetectParams()).compareTo(other.isSetDetectParams());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDetectParams()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.detectParams, other.detectParams);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("detect_args(");
      boolean first = true;

      sb.append("detectParams:");
      if (this.detectParams == null) {
        sb.append("null");
      } else {
        sb.append(this.detectParams);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
      if (detectParams != null) {
        detectParams.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class detect_argsStandardSchemeFactory implements SchemeFactory {
      public detect_argsStandardScheme getScheme() {
        return new detect_argsStandardScheme();
      }
    }

    private static class detect_argsStandardScheme extends StandardScheme<detect_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, detect_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DETECT_PARAMS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.detectParams = new com.spinfosec.parse.bean.DetectParams();
                struct.detectParams.read(iprot);
                struct.setDetectParamsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, detect_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.detectParams != null) {
          oprot.writeFieldBegin(DETECT_PARAMS_FIELD_DESC);
          struct.detectParams.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class detect_argsTupleSchemeFactory implements SchemeFactory {
      public detect_argsTupleScheme getScheme() {
        return new detect_argsTupleScheme();
      }
    }

    private static class detect_argsTupleScheme extends TupleScheme<detect_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, detect_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDetectParams()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDetectParams()) {
          struct.detectParams.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, detect_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.detectParams = new com.spinfosec.parse.bean.DetectParams();
          struct.detectParams.read(iprot);
          struct.setDetectParamsIsSet(true);
        }
      }
    }

  }

  public static class detect_result implements org.apache.thrift.TBase<detect_result, detect_result._Fields>, java.io.Serializable, Cloneable, Comparable<detect_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("detect_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new detect_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new detect_resultTupleSchemeFactory());
    }

    public com.spinfosec.parse.bean.DetectResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.spinfosec.parse.bean.DetectResult.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(detect_result.class, metaDataMap);
    }

    public detect_result() {
    }

    public detect_result(
      com.spinfosec.parse.bean.DetectResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public detect_result(detect_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.spinfosec.parse.bean.DetectResult(other.success);
      }
    }

    public detect_result deepCopy() {
      return new detect_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.spinfosec.parse.bean.DetectResult getSuccess() {
      return this.success;
    }

    public detect_result setSuccess(com.spinfosec.parse.bean.DetectResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.spinfosec.parse.bean.DetectResult)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof detect_result)
        return this.equals((detect_result)that);
      return false;
    }

    public boolean equals(detect_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(detect_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("detect_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class detect_resultStandardSchemeFactory implements SchemeFactory {
      public detect_resultStandardScheme getScheme() {
        return new detect_resultStandardScheme();
      }
    }

    private static class detect_resultStandardScheme extends StandardScheme<detect_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, detect_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.spinfosec.parse.bean.DetectResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, detect_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class detect_resultTupleSchemeFactory implements SchemeFactory {
      public detect_resultTupleScheme getScheme() {
        return new detect_resultTupleScheme();
      }
    }

    private static class detect_resultTupleScheme extends TupleScheme<detect_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, detect_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, detect_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.spinfosec.parse.bean.DetectResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class parse_args implements org.apache.thrift.TBase<parse_args, parse_args._Fields>, java.io.Serializable, Cloneable, Comparable<parse_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("parse_args");

    private static final org.apache.thrift.protocol.TField PARSE_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("parseParams", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new parse_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new parse_argsTupleSchemeFactory());
    }

    public com.spinfosec.parse.bean.ParseParams parseParams; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PARSE_PARAMS((short)1, "parseParams");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PARSE_PARAMS
            return PARSE_PARAMS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PARSE_PARAMS, new org.apache.thrift.meta_data.FieldMetaData("parseParams", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.spinfosec.parse.bean.ParseParams.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(parse_args.class, metaDataMap);
    }

    public parse_args() {
    }

    public parse_args(
      com.spinfosec.parse.bean.ParseParams parseParams)
    {
      this();
      this.parseParams = parseParams;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public parse_args(parse_args other) {
      if (other.isSetParseParams()) {
        this.parseParams = new com.spinfosec.parse.bean.ParseParams(other.parseParams);
      }
    }

    public parse_args deepCopy() {
      return new parse_args(this);
    }

    @Override
    public void clear() {
      this.parseParams = null;
    }

    public com.spinfosec.parse.bean.ParseParams getParseParams() {
      return this.parseParams;
    }

    public parse_args setParseParams(com.spinfosec.parse.bean.ParseParams parseParams) {
      this.parseParams = parseParams;
      return this;
    }

    public void unsetParseParams() {
      this.parseParams = null;
    }

    /** Returns true if field parseParams is set (has been assigned a value) and false otherwise */
    public boolean isSetParseParams() {
      return this.parseParams != null;
    }

    public void setParseParamsIsSet(boolean value) {
      if (!value) {
        this.parseParams = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PARSE_PARAMS:
        if (value == null) {
          unsetParseParams();
        } else {
          setParseParams((com.spinfosec.parse.bean.ParseParams)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PARSE_PARAMS:
        return getParseParams();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PARSE_PARAMS:
        return isSetParseParams();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof parse_args)
        return this.equals((parse_args)that);
      return false;
    }

    public boolean equals(parse_args that) {
      if (that == null)
        return false;

      boolean this_present_parseParams = true && this.isSetParseParams();
      boolean that_present_parseParams = true && that.isSetParseParams();
      if (this_present_parseParams || that_present_parseParams) {
        if (!(this_present_parseParams && that_present_parseParams))
          return false;
        if (!this.parseParams.equals(that.parseParams))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_parseParams = true && (isSetParseParams());
      list.add(present_parseParams);
      if (present_parseParams)
        list.add(parseParams);

      return list.hashCode();
    }

    @Override
    public int compareTo(parse_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetParseParams()).compareTo(other.isSetParseParams());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParseParams()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parseParams, other.parseParams);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("parse_args(");
      boolean first = true;

      sb.append("parseParams:");
      if (this.parseParams == null) {
        sb.append("null");
      } else {
        sb.append(this.parseParams);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
      if (parseParams != null) {
        parseParams.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class parse_argsStandardSchemeFactory implements SchemeFactory {
      public parse_argsStandardScheme getScheme() {
        return new parse_argsStandardScheme();
      }
    }

    private static class parse_argsStandardScheme extends StandardScheme<parse_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, parse_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PARSE_PARAMS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.parseParams = new com.spinfosec.parse.bean.ParseParams();
                struct.parseParams.read(iprot);
                struct.setParseParamsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, parse_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.parseParams != null) {
          oprot.writeFieldBegin(PARSE_PARAMS_FIELD_DESC);
          struct.parseParams.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class parse_argsTupleSchemeFactory implements SchemeFactory {
      public parse_argsTupleScheme getScheme() {
        return new parse_argsTupleScheme();
      }
    }

    private static class parse_argsTupleScheme extends TupleScheme<parse_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, parse_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetParseParams()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetParseParams()) {
          struct.parseParams.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, parse_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.parseParams = new com.spinfosec.parse.bean.ParseParams();
          struct.parseParams.read(iprot);
          struct.setParseParamsIsSet(true);
        }
      }
    }

  }

  public static class parse_result implements org.apache.thrift.TBase<parse_result, parse_result._Fields>, java.io.Serializable, Cloneable, Comparable<parse_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("parse_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new parse_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new parse_resultTupleSchemeFactory());
    }

    public com.spinfosec.parse.bean.ParseResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.spinfosec.parse.bean.ParseResult.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(parse_result.class, metaDataMap);
    }

    public parse_result() {
    }

    public parse_result(
      com.spinfosec.parse.bean.ParseResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public parse_result(parse_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.spinfosec.parse.bean.ParseResult(other.success);
      }
    }

    public parse_result deepCopy() {
      return new parse_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.spinfosec.parse.bean.ParseResult getSuccess() {
      return this.success;
    }

    public parse_result setSuccess(com.spinfosec.parse.bean.ParseResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.spinfosec.parse.bean.ParseResult)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof parse_result)
        return this.equals((parse_result)that);
      return false;
    }

    public boolean equals(parse_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(parse_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("parse_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class parse_resultStandardSchemeFactory implements SchemeFactory {
      public parse_resultStandardScheme getScheme() {
        return new parse_resultStandardScheme();
      }
    }

    private static class parse_resultStandardScheme extends StandardScheme<parse_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, parse_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.spinfosec.parse.bean.ParseResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, parse_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class parse_resultTupleSchemeFactory implements SchemeFactory {
      public parse_resultTupleScheme getScheme() {
        return new parse_resultTupleScheme();
      }
    }

    private static class parse_resultTupleScheme extends TupleScheme<parse_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, parse_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, parse_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.spinfosec.parse.bean.ParseResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class extract_args implements org.apache.thrift.TBase<extract_args, extract_args._Fields>, java.io.Serializable, Cloneable, Comparable<extract_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("extract_args");

    private static final org.apache.thrift.protocol.TField EXTRACT_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("extractParams", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new extract_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new extract_argsTupleSchemeFactory());
    }

    public com.spinfosec.parse.bean.ExtractParams extractParams; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EXTRACT_PARAMS((short)1, "extractParams");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EXTRACT_PARAMS
            return EXTRACT_PARAMS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EXTRACT_PARAMS, new org.apache.thrift.meta_data.FieldMetaData("extractParams", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.spinfosec.parse.bean.ExtractParams.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(extract_args.class, metaDataMap);
    }

    public extract_args() {
    }

    public extract_args(
      com.spinfosec.parse.bean.ExtractParams extractParams)
    {
      this();
      this.extractParams = extractParams;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public extract_args(extract_args other) {
      if (other.isSetExtractParams()) {
        this.extractParams = new com.spinfosec.parse.bean.ExtractParams(other.extractParams);
      }
    }

    public extract_args deepCopy() {
      return new extract_args(this);
    }

    @Override
    public void clear() {
      this.extractParams = null;
    }

    public com.spinfosec.parse.bean.ExtractParams getExtractParams() {
      return this.extractParams;
    }

    public extract_args setExtractParams(com.spinfosec.parse.bean.ExtractParams extractParams) {
      this.extractParams = extractParams;
      return this;
    }

    public void unsetExtractParams() {
      this.extractParams = null;
    }

    /** Returns true if field extractParams is set (has been assigned a value) and false otherwise */
    public boolean isSetExtractParams() {
      return this.extractParams != null;
    }

    public void setExtractParamsIsSet(boolean value) {
      if (!value) {
        this.extractParams = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case EXTRACT_PARAMS:
        if (value == null) {
          unsetExtractParams();
        } else {
          setExtractParams((com.spinfosec.parse.bean.ExtractParams)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case EXTRACT_PARAMS:
        return getExtractParams();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case EXTRACT_PARAMS:
        return isSetExtractParams();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof extract_args)
        return this.equals((extract_args)that);
      return false;
    }

    public boolean equals(extract_args that) {
      if (that == null)
        return false;

      boolean this_present_extractParams = true && this.isSetExtractParams();
      boolean that_present_extractParams = true && that.isSetExtractParams();
      if (this_present_extractParams || that_present_extractParams) {
        if (!(this_present_extractParams && that_present_extractParams))
          return false;
        if (!this.extractParams.equals(that.extractParams))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_extractParams = true && (isSetExtractParams());
      list.add(present_extractParams);
      if (present_extractParams)
        list.add(extractParams);

      return list.hashCode();
    }

    @Override
    public int compareTo(extract_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetExtractParams()).compareTo(other.isSetExtractParams());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExtractParams()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.extractParams, other.extractParams);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("extract_args(");
      boolean first = true;

      sb.append("extractParams:");
      if (this.extractParams == null) {
        sb.append("null");
      } else {
        sb.append(this.extractParams);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
      if (extractParams != null) {
        extractParams.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class extract_argsStandardSchemeFactory implements SchemeFactory {
      public extract_argsStandardScheme getScheme() {
        return new extract_argsStandardScheme();
      }
    }

    private static class extract_argsStandardScheme extends StandardScheme<extract_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, extract_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EXTRACT_PARAMS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.extractParams = new com.spinfosec.parse.bean.ExtractParams();
                struct.extractParams.read(iprot);
                struct.setExtractParamsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, extract_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.extractParams != null) {
          oprot.writeFieldBegin(EXTRACT_PARAMS_FIELD_DESC);
          struct.extractParams.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class extract_argsTupleSchemeFactory implements SchemeFactory {
      public extract_argsTupleScheme getScheme() {
        return new extract_argsTupleScheme();
      }
    }

    private static class extract_argsTupleScheme extends TupleScheme<extract_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, extract_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetExtractParams()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetExtractParams()) {
          struct.extractParams.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, extract_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.extractParams = new com.spinfosec.parse.bean.ExtractParams();
          struct.extractParams.read(iprot);
          struct.setExtractParamsIsSet(true);
        }
      }
    }

  }

  public static class extract_result implements org.apache.thrift.TBase<extract_result, extract_result._Fields>, java.io.Serializable, Cloneable, Comparable<extract_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("extract_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new extract_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new extract_resultTupleSchemeFactory());
    }

    public com.spinfosec.parse.bean.ExtractResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.spinfosec.parse.bean.ExtractResult.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(extract_result.class, metaDataMap);
    }

    public extract_result() {
    }

    public extract_result(
      com.spinfosec.parse.bean.ExtractResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public extract_result(extract_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.spinfosec.parse.bean.ExtractResult(other.success);
      }
    }

    public extract_result deepCopy() {
      return new extract_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.spinfosec.parse.bean.ExtractResult getSuccess() {
      return this.success;
    }

    public extract_result setSuccess(com.spinfosec.parse.bean.ExtractResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.spinfosec.parse.bean.ExtractResult)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof extract_result)
        return this.equals((extract_result)that);
      return false;
    }

    public boolean equals(extract_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(extract_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("extract_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class extract_resultStandardSchemeFactory implements SchemeFactory {
      public extract_resultStandardScheme getScheme() {
        return new extract_resultStandardScheme();
      }
    }

    private static class extract_resultStandardScheme extends StandardScheme<extract_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, extract_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.spinfosec.parse.bean.ExtractResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, extract_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class extract_resultTupleSchemeFactory implements SchemeFactory {
      public extract_resultTupleScheme getScheme() {
        return new extract_resultTupleScheme();
      }
    }

    private static class extract_resultTupleScheme extends TupleScheme<extract_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, extract_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, extract_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.spinfosec.parse.bean.ExtractResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
