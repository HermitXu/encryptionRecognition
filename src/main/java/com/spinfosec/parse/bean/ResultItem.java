/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.spinfosec.parse.bean;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-11-27")
public class ResultItem implements org.apache.thrift.TBase<ResultItem, ResultItem._Fields>, java.io.Serializable, Cloneable, Comparable<ResultItem> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ResultItem");

  private static final org.apache.thrift.protocol.TField MIME_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("mimeType", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField CHARSET_FIELD_DESC = new org.apache.thrift.protocol.TField("charset", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField LENGTH_FIELD_DESC = new org.apache.thrift.protocol.TField("length", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("content", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField FILE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("fileName", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField HEADERS_LENGTH_FIELD_DESC = new org.apache.thrift.protocol.TField("headersLength", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField HEADERS_FIELD_DESC = new org.apache.thrift.protocol.TField("headers", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField FOOTERS_LENGTH_FIELD_DESC = new org.apache.thrift.protocol.TField("footersLength", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField FOOTERS_FIELD_DESC = new org.apache.thrift.protocol.TField("footers", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField METADATAS_FIELD_DESC = new org.apache.thrift.protocol.TField("metadatas", org.apache.thrift.protocol.TType.MAP, (short)10);
  private static final org.apache.thrift.protocol.TField CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("code", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("message", org.apache.thrift.protocol.TType.STRING, (short)12);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ResultItemStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ResultItemTupleSchemeFactory());
  }

  public String mimeType; // required
  public String charset; // required
  public int length; // required
  public String content; // required
  public String fileName; // required
  public int headersLength; // required
  public String headers; // required
  public int footersLength; // required
  public String footers; // required
  public Map<String,String> metadatas; // required
  public int code; // required
  public String message; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    MIME_TYPE((short)1, "mimeType"),
    CHARSET((short)2, "charset"),
    LENGTH((short)3, "length"),
    CONTENT((short)4, "content"),
    FILE_NAME((short)5, "fileName"),
    HEADERS_LENGTH((short)6, "headersLength"),
    HEADERS((short)7, "headers"),
    FOOTERS_LENGTH((short)8, "footersLength"),
    FOOTERS((short)9, "footers"),
    METADATAS((short)10, "metadatas"),
    CODE((short)11, "code"),
    MESSAGE((short)12, "message");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MIME_TYPE
          return MIME_TYPE;
        case 2: // CHARSET
          return CHARSET;
        case 3: // LENGTH
          return LENGTH;
        case 4: // CONTENT
          return CONTENT;
        case 5: // FILE_NAME
          return FILE_NAME;
        case 6: // HEADERS_LENGTH
          return HEADERS_LENGTH;
        case 7: // HEADERS
          return HEADERS;
        case 8: // FOOTERS_LENGTH
          return FOOTERS_LENGTH;
        case 9: // FOOTERS
          return FOOTERS;
        case 10: // METADATAS
          return METADATAS;
        case 11: // CODE
          return CODE;
        case 12: // MESSAGE
          return MESSAGE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __LENGTH_ISSET_ID = 0;
  private static final int __HEADERSLENGTH_ISSET_ID = 1;
  private static final int __FOOTERSLENGTH_ISSET_ID = 2;
  private static final int __CODE_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MIME_TYPE, new org.apache.thrift.meta_data.FieldMetaData("mimeType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CHARSET, new org.apache.thrift.meta_data.FieldMetaData("charset", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LENGTH, new org.apache.thrift.meta_data.FieldMetaData("length", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CONTENT, new org.apache.thrift.meta_data.FieldMetaData("content", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FILE_NAME, new org.apache.thrift.meta_data.FieldMetaData("fileName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HEADERS_LENGTH, new org.apache.thrift.meta_data.FieldMetaData("headersLength", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.HEADERS, new org.apache.thrift.meta_data.FieldMetaData("headers", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FOOTERS_LENGTH, new org.apache.thrift.meta_data.FieldMetaData("footersLength", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FOOTERS, new org.apache.thrift.meta_data.FieldMetaData("footers", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.METADATAS, new org.apache.thrift.meta_data.FieldMetaData("metadatas", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.CODE, new org.apache.thrift.meta_data.FieldMetaData("code", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("message", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ResultItem.class, metaDataMap);
  }

  public ResultItem() {
  }

  public ResultItem(
    String mimeType,
    String charset,
    int length,
    String content,
    String fileName,
    int headersLength,
    String headers,
    int footersLength,
    String footers,
    Map<String,String> metadatas,
    int code,
    String message)
  {
    this();
    this.mimeType = mimeType;
    this.charset = charset;
    this.length = length;
    setLengthIsSet(true);
    this.content = content;
    this.fileName = fileName;
    this.headersLength = headersLength;
    setHeadersLengthIsSet(true);
    this.headers = headers;
    this.footersLength = footersLength;
    setFootersLengthIsSet(true);
    this.footers = footers;
    this.metadatas = metadatas;
    this.code = code;
    setCodeIsSet(true);
    this.message = message;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ResultItem(ResultItem other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetMimeType()) {
      this.mimeType = other.mimeType;
    }
    if (other.isSetCharset()) {
      this.charset = other.charset;
    }
    this.length = other.length;
    if (other.isSetContent()) {
      this.content = other.content;
    }
    if (other.isSetFileName()) {
      this.fileName = other.fileName;
    }
    this.headersLength = other.headersLength;
    if (other.isSetHeaders()) {
      this.headers = other.headers;
    }
    this.footersLength = other.footersLength;
    if (other.isSetFooters()) {
      this.footers = other.footers;
    }
    if (other.isSetMetadatas()) {
      Map<String,String> __this__metadatas = new HashMap<String,String>(other.metadatas);
      this.metadatas = __this__metadatas;
    }
    this.code = other.code;
    if (other.isSetMessage()) {
      this.message = other.message;
    }
  }

  public ResultItem deepCopy() {
    return new ResultItem(this);
  }

  @Override
  public void clear() {
    this.mimeType = null;
    this.charset = null;
    setLengthIsSet(false);
    this.length = 0;
    this.content = null;
    this.fileName = null;
    setHeadersLengthIsSet(false);
    this.headersLength = 0;
    this.headers = null;
    setFootersLengthIsSet(false);
    this.footersLength = 0;
    this.footers = null;
    this.metadatas = null;
    setCodeIsSet(false);
    this.code = 0;
    this.message = null;
  }

  public String getMimeType() {
    return this.mimeType;
  }

  public ResultItem setMimeType(String mimeType) {
    this.mimeType = mimeType;
    return this;
  }

  public void unsetMimeType() {
    this.mimeType = null;
  }

  /** Returns true if field mimeType is set (has been assigned a value) and false otherwise */
  public boolean isSetMimeType() {
    return this.mimeType != null;
  }

  public void setMimeTypeIsSet(boolean value) {
    if (!value) {
      this.mimeType = null;
    }
  }

  public String getCharset() {
    return this.charset;
  }

  public ResultItem setCharset(String charset) {
    this.charset = charset;
    return this;
  }

  public void unsetCharset() {
    this.charset = null;
  }

  /** Returns true if field charset is set (has been assigned a value) and false otherwise */
  public boolean isSetCharset() {
    return this.charset != null;
  }

  public void setCharsetIsSet(boolean value) {
    if (!value) {
      this.charset = null;
    }
  }

  public int getLength() {
    return this.length;
  }

  public ResultItem setLength(int length) {
    this.length = length;
    setLengthIsSet(true);
    return this;
  }

  public void unsetLength() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LENGTH_ISSET_ID);
  }

  /** Returns true if field length is set (has been assigned a value) and false otherwise */
  public boolean isSetLength() {
    return EncodingUtils.testBit(__isset_bitfield, __LENGTH_ISSET_ID);
  }

  public void setLengthIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LENGTH_ISSET_ID, value);
  }

  public String getContent() {
    return this.content;
  }

  public ResultItem setContent(String content) {
    this.content = content;
    return this;
  }

  public void unsetContent() {
    this.content = null;
  }

  /** Returns true if field content is set (has been assigned a value) and false otherwise */
  public boolean isSetContent() {
    return this.content != null;
  }

  public void setContentIsSet(boolean value) {
    if (!value) {
      this.content = null;
    }
  }

  public String getFileName() {
    return this.fileName;
  }

  public ResultItem setFileName(String fileName) {
    this.fileName = fileName;
    return this;
  }

  public void unsetFileName() {
    this.fileName = null;
  }

  /** Returns true if field fileName is set (has been assigned a value) and false otherwise */
  public boolean isSetFileName() {
    return this.fileName != null;
  }

  public void setFileNameIsSet(boolean value) {
    if (!value) {
      this.fileName = null;
    }
  }

  public int getHeadersLength() {
    return this.headersLength;
  }

  public ResultItem setHeadersLength(int headersLength) {
    this.headersLength = headersLength;
    setHeadersLengthIsSet(true);
    return this;
  }

  public void unsetHeadersLength() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HEADERSLENGTH_ISSET_ID);
  }

  /** Returns true if field headersLength is set (has been assigned a value) and false otherwise */
  public boolean isSetHeadersLength() {
    return EncodingUtils.testBit(__isset_bitfield, __HEADERSLENGTH_ISSET_ID);
  }

  public void setHeadersLengthIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HEADERSLENGTH_ISSET_ID, value);
  }

  public String getHeaders() {
    return this.headers;
  }

  public ResultItem setHeaders(String headers) {
    this.headers = headers;
    return this;
  }

  public void unsetHeaders() {
    this.headers = null;
  }

  /** Returns true if field headers is set (has been assigned a value) and false otherwise */
  public boolean isSetHeaders() {
    return this.headers != null;
  }

  public void setHeadersIsSet(boolean value) {
    if (!value) {
      this.headers = null;
    }
  }

  public int getFootersLength() {
    return this.footersLength;
  }

  public ResultItem setFootersLength(int footersLength) {
    this.footersLength = footersLength;
    setFootersLengthIsSet(true);
    return this;
  }

  public void unsetFootersLength() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FOOTERSLENGTH_ISSET_ID);
  }

  /** Returns true if field footersLength is set (has been assigned a value) and false otherwise */
  public boolean isSetFootersLength() {
    return EncodingUtils.testBit(__isset_bitfield, __FOOTERSLENGTH_ISSET_ID);
  }

  public void setFootersLengthIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FOOTERSLENGTH_ISSET_ID, value);
  }

  public String getFooters() {
    return this.footers;
  }

  public ResultItem setFooters(String footers) {
    this.footers = footers;
    return this;
  }

  public void unsetFooters() {
    this.footers = null;
  }

  /** Returns true if field footers is set (has been assigned a value) and false otherwise */
  public boolean isSetFooters() {
    return this.footers != null;
  }

  public void setFootersIsSet(boolean value) {
    if (!value) {
      this.footers = null;
    }
  }

  public int getMetadatasSize() {
    return (this.metadatas == null) ? 0 : this.metadatas.size();
  }

  public void putToMetadatas(String key, String val) {
    if (this.metadatas == null) {
      this.metadatas = new HashMap<String,String>();
    }
    this.metadatas.put(key, val);
  }

  public Map<String,String> getMetadatas() {
    return this.metadatas;
  }

  public ResultItem setMetadatas(Map<String,String> metadatas) {
    this.metadatas = metadatas;
    return this;
  }

  public void unsetMetadatas() {
    this.metadatas = null;
  }

  /** Returns true if field metadatas is set (has been assigned a value) and false otherwise */
  public boolean isSetMetadatas() {
    return this.metadatas != null;
  }

  public void setMetadatasIsSet(boolean value) {
    if (!value) {
      this.metadatas = null;
    }
  }

  public int getCode() {
    return this.code;
  }

  public ResultItem setCode(int code) {
    this.code = code;
    setCodeIsSet(true);
    return this;
  }

  public void unsetCode() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CODE_ISSET_ID);
  }

  /** Returns true if field code is set (has been assigned a value) and false otherwise */
  public boolean isSetCode() {
    return EncodingUtils.testBit(__isset_bitfield, __CODE_ISSET_ID);
  }

  public void setCodeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CODE_ISSET_ID, value);
  }

  public String getMessage() {
    return this.message;
  }

  public ResultItem setMessage(String message) {
    this.message = message;
    return this;
  }

  public void unsetMessage() {
    this.message = null;
  }

  /** Returns true if field message is set (has been assigned a value) and false otherwise */
  public boolean isSetMessage() {
    return this.message != null;
  }

  public void setMessageIsSet(boolean value) {
    if (!value) {
      this.message = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case MIME_TYPE:
      if (value == null) {
        unsetMimeType();
      } else {
        setMimeType((String)value);
      }
      break;

    case CHARSET:
      if (value == null) {
        unsetCharset();
      } else {
        setCharset((String)value);
      }
      break;

    case LENGTH:
      if (value == null) {
        unsetLength();
      } else {
        setLength((Integer)value);
      }
      break;

    case CONTENT:
      if (value == null) {
        unsetContent();
      } else {
        setContent((String)value);
      }
      break;

    case FILE_NAME:
      if (value == null) {
        unsetFileName();
      } else {
        setFileName((String)value);
      }
      break;

    case HEADERS_LENGTH:
      if (value == null) {
        unsetHeadersLength();
      } else {
        setHeadersLength((Integer)value);
      }
      break;

    case HEADERS:
      if (value == null) {
        unsetHeaders();
      } else {
        setHeaders((String)value);
      }
      break;

    case FOOTERS_LENGTH:
      if (value == null) {
        unsetFootersLength();
      } else {
        setFootersLength((Integer)value);
      }
      break;

    case FOOTERS:
      if (value == null) {
        unsetFooters();
      } else {
        setFooters((String)value);
      }
      break;

    case METADATAS:
      if (value == null) {
        unsetMetadatas();
      } else {
        setMetadatas((Map<String,String>)value);
      }
      break;

    case CODE:
      if (value == null) {
        unsetCode();
      } else {
        setCode((Integer)value);
      }
      break;

    case MESSAGE:
      if (value == null) {
        unsetMessage();
      } else {
        setMessage((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case MIME_TYPE:
      return getMimeType();

    case CHARSET:
      return getCharset();

    case LENGTH:
      return getLength();

    case CONTENT:
      return getContent();

    case FILE_NAME:
      return getFileName();

    case HEADERS_LENGTH:
      return getHeadersLength();

    case HEADERS:
      return getHeaders();

    case FOOTERS_LENGTH:
      return getFootersLength();

    case FOOTERS:
      return getFooters();

    case METADATAS:
      return getMetadatas();

    case CODE:
      return getCode();

    case MESSAGE:
      return getMessage();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case MIME_TYPE:
      return isSetMimeType();
    case CHARSET:
      return isSetCharset();
    case LENGTH:
      return isSetLength();
    case CONTENT:
      return isSetContent();
    case FILE_NAME:
      return isSetFileName();
    case HEADERS_LENGTH:
      return isSetHeadersLength();
    case HEADERS:
      return isSetHeaders();
    case FOOTERS_LENGTH:
      return isSetFootersLength();
    case FOOTERS:
      return isSetFooters();
    case METADATAS:
      return isSetMetadatas();
    case CODE:
      return isSetCode();
    case MESSAGE:
      return isSetMessage();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ResultItem)
      return this.equals((ResultItem)that);
    return false;
  }

  public boolean equals(ResultItem that) {
    if (that == null)
      return false;

    boolean this_present_mimeType = true && this.isSetMimeType();
    boolean that_present_mimeType = true && that.isSetMimeType();
    if (this_present_mimeType || that_present_mimeType) {
      if (!(this_present_mimeType && that_present_mimeType))
        return false;
      if (!this.mimeType.equals(that.mimeType))
        return false;
    }

    boolean this_present_charset = true && this.isSetCharset();
    boolean that_present_charset = true && that.isSetCharset();
    if (this_present_charset || that_present_charset) {
      if (!(this_present_charset && that_present_charset))
        return false;
      if (!this.charset.equals(that.charset))
        return false;
    }

    boolean this_present_length = true;
    boolean that_present_length = true;
    if (this_present_length || that_present_length) {
      if (!(this_present_length && that_present_length))
        return false;
      if (this.length != that.length)
        return false;
    }

    boolean this_present_content = true && this.isSetContent();
    boolean that_present_content = true && that.isSetContent();
    if (this_present_content || that_present_content) {
      if (!(this_present_content && that_present_content))
        return false;
      if (!this.content.equals(that.content))
        return false;
    }

    boolean this_present_fileName = true && this.isSetFileName();
    boolean that_present_fileName = true && that.isSetFileName();
    if (this_present_fileName || that_present_fileName) {
      if (!(this_present_fileName && that_present_fileName))
        return false;
      if (!this.fileName.equals(that.fileName))
        return false;
    }

    boolean this_present_headersLength = true;
    boolean that_present_headersLength = true;
    if (this_present_headersLength || that_present_headersLength) {
      if (!(this_present_headersLength && that_present_headersLength))
        return false;
      if (this.headersLength != that.headersLength)
        return false;
    }

    boolean this_present_headers = true && this.isSetHeaders();
    boolean that_present_headers = true && that.isSetHeaders();
    if (this_present_headers || that_present_headers) {
      if (!(this_present_headers && that_present_headers))
        return false;
      if (!this.headers.equals(that.headers))
        return false;
    }

    boolean this_present_footersLength = true;
    boolean that_present_footersLength = true;
    if (this_present_footersLength || that_present_footersLength) {
      if (!(this_present_footersLength && that_present_footersLength))
        return false;
      if (this.footersLength != that.footersLength)
        return false;
    }

    boolean this_present_footers = true && this.isSetFooters();
    boolean that_present_footers = true && that.isSetFooters();
    if (this_present_footers || that_present_footers) {
      if (!(this_present_footers && that_present_footers))
        return false;
      if (!this.footers.equals(that.footers))
        return false;
    }

    boolean this_present_metadatas = true && this.isSetMetadatas();
    boolean that_present_metadatas = true && that.isSetMetadatas();
    if (this_present_metadatas || that_present_metadatas) {
      if (!(this_present_metadatas && that_present_metadatas))
        return false;
      if (!this.metadatas.equals(that.metadatas))
        return false;
    }

    boolean this_present_code = true;
    boolean that_present_code = true;
    if (this_present_code || that_present_code) {
      if (!(this_present_code && that_present_code))
        return false;
      if (this.code != that.code)
        return false;
    }

    boolean this_present_message = true && this.isSetMessage();
    boolean that_present_message = true && that.isSetMessage();
    if (this_present_message || that_present_message) {
      if (!(this_present_message && that_present_message))
        return false;
      if (!this.message.equals(that.message))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_mimeType = true && (isSetMimeType());
    list.add(present_mimeType);
    if (present_mimeType)
      list.add(mimeType);

    boolean present_charset = true && (isSetCharset());
    list.add(present_charset);
    if (present_charset)
      list.add(charset);

    boolean present_length = true;
    list.add(present_length);
    if (present_length)
      list.add(length);

    boolean present_content = true && (isSetContent());
    list.add(present_content);
    if (present_content)
      list.add(content);

    boolean present_fileName = true && (isSetFileName());
    list.add(present_fileName);
    if (present_fileName)
      list.add(fileName);

    boolean present_headersLength = true;
    list.add(present_headersLength);
    if (present_headersLength)
      list.add(headersLength);

    boolean present_headers = true && (isSetHeaders());
    list.add(present_headers);
    if (present_headers)
      list.add(headers);

    boolean present_footersLength = true;
    list.add(present_footersLength);
    if (present_footersLength)
      list.add(footersLength);

    boolean present_footers = true && (isSetFooters());
    list.add(present_footers);
    if (present_footers)
      list.add(footers);

    boolean present_metadatas = true && (isSetMetadatas());
    list.add(present_metadatas);
    if (present_metadatas)
      list.add(metadatas);

    boolean present_code = true;
    list.add(present_code);
    if (present_code)
      list.add(code);

    boolean present_message = true && (isSetMessage());
    list.add(present_message);
    if (present_message)
      list.add(message);

    return list.hashCode();
  }

  @Override
  public int compareTo(ResultItem other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetMimeType()).compareTo(other.isSetMimeType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMimeType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mimeType, other.mimeType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCharset()).compareTo(other.isSetCharset());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCharset()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.charset, other.charset);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLength()).compareTo(other.isSetLength());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLength()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.length, other.length);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContent()).compareTo(other.isSetContent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.content, other.content);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFileName()).compareTo(other.isSetFileName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFileName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileName, other.fileName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHeadersLength()).compareTo(other.isSetHeadersLength());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHeadersLength()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.headersLength, other.headersLength);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHeaders()).compareTo(other.isSetHeaders());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHeaders()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.headers, other.headers);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFootersLength()).compareTo(other.isSetFootersLength());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFootersLength()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.footersLength, other.footersLength);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFooters()).compareTo(other.isSetFooters());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFooters()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.footers, other.footers);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMetadatas()).compareTo(other.isSetMetadatas());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMetadatas()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.metadatas, other.metadatas);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCode()).compareTo(other.isSetCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.code, other.code);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMessage()).compareTo(other.isSetMessage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMessage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.message, other.message);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ResultItem(");
    boolean first = true;

    sb.append("mimeType:");
    if (this.mimeType == null) {
      sb.append("null");
    } else {
      sb.append(this.mimeType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("charset:");
    if (this.charset == null) {
      sb.append("null");
    } else {
      sb.append(this.charset);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("length:");
    sb.append(this.length);
    first = false;
    if (!first) sb.append(", ");
    sb.append("content:");
    if (this.content == null) {
      sb.append("null");
    } else {
      sb.append(this.content);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fileName:");
    if (this.fileName == null) {
      sb.append("null");
    } else {
      sb.append(this.fileName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("headersLength:");
    sb.append(this.headersLength);
    first = false;
    if (!first) sb.append(", ");
    sb.append("headers:");
    if (this.headers == null) {
      sb.append("null");
    } else {
      sb.append(this.headers);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("footersLength:");
    sb.append(this.footersLength);
    first = false;
    if (!first) sb.append(", ");
    sb.append("footers:");
    if (this.footers == null) {
      sb.append("null");
    } else {
      sb.append(this.footers);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("metadatas:");
    if (this.metadatas == null) {
      sb.append("null");
    } else {
      sb.append(this.metadatas);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("code:");
    sb.append(this.code);
    first = false;
    if (!first) sb.append(", ");
    sb.append("message:");
    if (this.message == null) {
      sb.append("null");
    } else {
      sb.append(this.message);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ResultItemStandardSchemeFactory implements SchemeFactory {
    public ResultItemStandardScheme getScheme() {
      return new ResultItemStandardScheme();
    }
  }

  private static class ResultItemStandardScheme extends StandardScheme<ResultItem> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ResultItem struct) throws TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // MIME_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.mimeType = iprot.readString();
              struct.setMimeTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CHARSET
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.charset = iprot.readString();
              struct.setCharsetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // LENGTH
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.length = iprot.readI32();
              struct.setLengthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CONTENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.content = iprot.readString();
              struct.setContentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // FILE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fileName = iprot.readString();
              struct.setFileNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // HEADERS_LENGTH
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.headersLength = iprot.readI32();
              struct.setHeadersLengthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // HEADERS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.headers = iprot.readString();
              struct.setHeadersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // FOOTERS_LENGTH
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.footersLength = iprot.readI32();
              struct.setFootersLengthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // FOOTERS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.footers = iprot.readString();
              struct.setFootersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // METADATAS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                struct.metadatas = new HashMap<String,String>(2*_map0.size);
                String _key1;
                String _val2;
                for (int _i3 = 0; _i3 < _map0.size; ++_i3)
                {
                  _key1 = iprot.readString();
                  _val2 = iprot.readString();
                  struct.metadatas.put(_key1, _val2);
                }
                iprot.readMapEnd();
              }
              struct.setMetadatasIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.code = iprot.readI32();
              struct.setCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // MESSAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.message = iprot.readString();
              struct.setMessageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ResultItem struct) throws TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.mimeType != null) {
        oprot.writeFieldBegin(MIME_TYPE_FIELD_DESC);
        oprot.writeString(struct.mimeType);
        oprot.writeFieldEnd();
      }
      if (struct.charset != null) {
        oprot.writeFieldBegin(CHARSET_FIELD_DESC);
        oprot.writeString(struct.charset);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(LENGTH_FIELD_DESC);
      oprot.writeI32(struct.length);
      oprot.writeFieldEnd();
      if (struct.content != null) {
        oprot.writeFieldBegin(CONTENT_FIELD_DESC);
        oprot.writeString(struct.content);
        oprot.writeFieldEnd();
      }
      if (struct.fileName != null) {
        oprot.writeFieldBegin(FILE_NAME_FIELD_DESC);
        oprot.writeString(struct.fileName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(HEADERS_LENGTH_FIELD_DESC);
      oprot.writeI32(struct.headersLength);
      oprot.writeFieldEnd();
      if (struct.headers != null) {
        oprot.writeFieldBegin(HEADERS_FIELD_DESC);
        oprot.writeString(struct.headers);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(FOOTERS_LENGTH_FIELD_DESC);
      oprot.writeI32(struct.footersLength);
      oprot.writeFieldEnd();
      if (struct.footers != null) {
        oprot.writeFieldBegin(FOOTERS_FIELD_DESC);
        oprot.writeString(struct.footers);
        oprot.writeFieldEnd();
      }
      if (struct.metadatas != null) {
        oprot.writeFieldBegin(METADATAS_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.metadatas.size()));
          for (Map.Entry<String, String> _iter4 : struct.metadatas.entrySet())
          {
            oprot.writeString(_iter4.getKey());
            oprot.writeString(_iter4.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CODE_FIELD_DESC);
      oprot.writeI32(struct.code);
      oprot.writeFieldEnd();
      if (struct.message != null) {
        oprot.writeFieldBegin(MESSAGE_FIELD_DESC);
        oprot.writeString(struct.message);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ResultItemTupleSchemeFactory implements SchemeFactory {
    public ResultItemTupleScheme getScheme() {
      return new ResultItemTupleScheme();
    }
  }

  private static class ResultItemTupleScheme extends TupleScheme<ResultItem> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ResultItem struct) throws TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetMimeType()) {
        optionals.set(0);
      }
      if (struct.isSetCharset()) {
        optionals.set(1);
      }
      if (struct.isSetLength()) {
        optionals.set(2);
      }
      if (struct.isSetContent()) {
        optionals.set(3);
      }
      if (struct.isSetFileName()) {
        optionals.set(4);
      }
      if (struct.isSetHeadersLength()) {
        optionals.set(5);
      }
      if (struct.isSetHeaders()) {
        optionals.set(6);
      }
      if (struct.isSetFootersLength()) {
        optionals.set(7);
      }
      if (struct.isSetFooters()) {
        optionals.set(8);
      }
      if (struct.isSetMetadatas()) {
        optionals.set(9);
      }
      if (struct.isSetCode()) {
        optionals.set(10);
      }
      if (struct.isSetMessage()) {
        optionals.set(11);
      }
      oprot.writeBitSet(optionals, 12);
      if (struct.isSetMimeType()) {
        oprot.writeString(struct.mimeType);
      }
      if (struct.isSetCharset()) {
        oprot.writeString(struct.charset);
      }
      if (struct.isSetLength()) {
        oprot.writeI32(struct.length);
      }
      if (struct.isSetContent()) {
        oprot.writeString(struct.content);
      }
      if (struct.isSetFileName()) {
        oprot.writeString(struct.fileName);
      }
      if (struct.isSetHeadersLength()) {
        oprot.writeI32(struct.headersLength);
      }
      if (struct.isSetHeaders()) {
        oprot.writeString(struct.headers);
      }
      if (struct.isSetFootersLength()) {
        oprot.writeI32(struct.footersLength);
      }
      if (struct.isSetFooters()) {
        oprot.writeString(struct.footers);
      }
      if (struct.isSetMetadatas()) {
        {
          oprot.writeI32(struct.metadatas.size());
          for (Map.Entry<String, String> _iter5 : struct.metadatas.entrySet())
          {
            oprot.writeString(_iter5.getKey());
            oprot.writeString(_iter5.getValue());
          }
        }
      }
      if (struct.isSetCode()) {
        oprot.writeI32(struct.code);
      }
      if (struct.isSetMessage()) {
        oprot.writeString(struct.message);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ResultItem struct) throws TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(12);
      if (incoming.get(0)) {
        struct.mimeType = iprot.readString();
        struct.setMimeTypeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.charset = iprot.readString();
        struct.setCharsetIsSet(true);
      }
      if (incoming.get(2)) {
        struct.length = iprot.readI32();
        struct.setLengthIsSet(true);
      }
      if (incoming.get(3)) {
        struct.content = iprot.readString();
        struct.setContentIsSet(true);
      }
      if (incoming.get(4)) {
        struct.fileName = iprot.readString();
        struct.setFileNameIsSet(true);
      }
      if (incoming.get(5)) {
        struct.headersLength = iprot.readI32();
        struct.setHeadersLengthIsSet(true);
      }
      if (incoming.get(6)) {
        struct.headers = iprot.readString();
        struct.setHeadersIsSet(true);
      }
      if (incoming.get(7)) {
        struct.footersLength = iprot.readI32();
        struct.setFootersLengthIsSet(true);
      }
      if (incoming.get(8)) {
        struct.footers = iprot.readString();
        struct.setFootersIsSet(true);
      }
      if (incoming.get(9)) {
        {
          org.apache.thrift.protocol.TMap _map6 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.metadatas = new HashMap<String,String>(2*_map6.size);
          String _key7;
          String _val8;
          for (int _i9 = 0; _i9 < _map6.size; ++_i9)
          {
            _key7 = iprot.readString();
            _val8 = iprot.readString();
            struct.metadatas.put(_key7, _val8);
          }
        }
        struct.setMetadatasIsSet(true);
      }
      if (incoming.get(10)) {
        struct.code = iprot.readI32();
        struct.setCodeIsSet(true);
      }
      if (incoming.get(11)) {
        struct.message = iprot.readString();
        struct.setMessageIsSet(true);
      }
    }
  }

}

