/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.spinfosec.thrift.dto;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-11-30")
public class TableColumn implements org.apache.thrift.TBase<TableColumn, TableColumn._Fields>, java.io.Serializable, Cloneable, Comparable<TableColumn> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TableColumn");

  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField TYPE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("typeName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField IS_AUTO_INCREMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("isAutoIncrement", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField IS_NULLABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("isNullable", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField CLASSIFICATION_FIELD_DESC = new org.apache.thrift.protocol.TField("classification", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField REMARK_FIELD_DESC = new org.apache.thrift.protocol.TField("remark", org.apache.thrift.protocol.TType.STRING, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TableColumnStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TableColumnTupleSchemeFactory());
  }

  public String name; // required
  public int type; // required
  public String typeName; // required
  public String isAutoIncrement; // required
  public String isNullable; // required
  public String classification; // required
  public String remark; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NAME((short)1, "name"),
    TYPE((short)2, "type"),
    TYPE_NAME((short)3, "typeName"),
    IS_AUTO_INCREMENT((short)4, "isAutoIncrement"),
    IS_NULLABLE((short)5, "isNullable"),
    CLASSIFICATION((short)6, "classification"),
    REMARK((short)7, "remark");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NAME
          return NAME;
        case 2: // TYPE
          return TYPE;
        case 3: // TYPE_NAME
          return TYPE_NAME;
        case 4: // IS_AUTO_INCREMENT
          return IS_AUTO_INCREMENT;
        case 5: // IS_NULLABLE
          return IS_NULLABLE;
        case 6: // CLASSIFICATION
          return CLASSIFICATION;
        case 7: // REMARK
          return REMARK;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TYPE_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TYPE_NAME, new org.apache.thrift.meta_data.FieldMetaData("typeName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_AUTO_INCREMENT, new org.apache.thrift.meta_data.FieldMetaData("isAutoIncrement", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_NULLABLE, new org.apache.thrift.meta_data.FieldMetaData("isNullable", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CLASSIFICATION, new org.apache.thrift.meta_data.FieldMetaData("classification", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REMARK, new org.apache.thrift.meta_data.FieldMetaData("remark", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TableColumn.class, metaDataMap);
  }

  public TableColumn() {
  }

  public TableColumn(
    String name,
    int type,
    String typeName,
    String isAutoIncrement,
    String isNullable,
    String classification,
    String remark)
  {
    this();
    this.name = name;
    this.type = type;
    setTypeIsSet(true);
    this.typeName = typeName;
    this.isAutoIncrement = isAutoIncrement;
    this.isNullable = isNullable;
    this.classification = classification;
    this.remark = remark;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TableColumn(TableColumn other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetName()) {
      this.name = other.name;
    }
    this.type = other.type;
    if (other.isSetTypeName()) {
      this.typeName = other.typeName;
    }
    if (other.isSetIsAutoIncrement()) {
      this.isAutoIncrement = other.isAutoIncrement;
    }
    if (other.isSetIsNullable()) {
      this.isNullable = other.isNullable;
    }
    if (other.isSetClassification()) {
      this.classification = other.classification;
    }
    if (other.isSetRemark()) {
      this.remark = other.remark;
    }
  }

  public TableColumn deepCopy() {
    return new TableColumn(this);
  }

  @Override
  public void clear() {
    this.name = null;
    setTypeIsSet(false);
    this.type = 0;
    this.typeName = null;
    this.isAutoIncrement = null;
    this.isNullable = null;
    this.classification = null;
    this.remark = null;
  }

  public String getName() {
    return this.name;
  }

  public TableColumn setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public int getType() {
    return this.type;
  }

  public TableColumn setType(int type) {
    this.type = type;
    setTypeIsSet(true);
    return this;
  }

  public void unsetType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TYPE_ISSET_ID);
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return EncodingUtils.testBit(__isset_bitfield, __TYPE_ISSET_ID);
  }

  public void setTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TYPE_ISSET_ID, value);
  }

  public String getTypeName() {
    return this.typeName;
  }

  public TableColumn setTypeName(String typeName) {
    this.typeName = typeName;
    return this;
  }

  public void unsetTypeName() {
    this.typeName = null;
  }

  /** Returns true if field typeName is set (has been assigned a value) and false otherwise */
  public boolean isSetTypeName() {
    return this.typeName != null;
  }

  public void setTypeNameIsSet(boolean value) {
    if (!value) {
      this.typeName = null;
    }
  }

  public String getIsAutoIncrement() {
    return this.isAutoIncrement;
  }

  public TableColumn setIsAutoIncrement(String isAutoIncrement) {
    this.isAutoIncrement = isAutoIncrement;
    return this;
  }

  public void unsetIsAutoIncrement() {
    this.isAutoIncrement = null;
  }

  /** Returns true if field isAutoIncrement is set (has been assigned a value) and false otherwise */
  public boolean isSetIsAutoIncrement() {
    return this.isAutoIncrement != null;
  }

  public void setIsAutoIncrementIsSet(boolean value) {
    if (!value) {
      this.isAutoIncrement = null;
    }
  }

  public String getIsNullable() {
    return this.isNullable;
  }

  public TableColumn setIsNullable(String isNullable) {
    this.isNullable = isNullable;
    return this;
  }

  public void unsetIsNullable() {
    this.isNullable = null;
  }

  /** Returns true if field isNullable is set (has been assigned a value) and false otherwise */
  public boolean isSetIsNullable() {
    return this.isNullable != null;
  }

  public void setIsNullableIsSet(boolean value) {
    if (!value) {
      this.isNullable = null;
    }
  }

  public String getClassification() {
    return this.classification;
  }

  public TableColumn setClassification(String classification) {
    this.classification = classification;
    return this;
  }

  public void unsetClassification() {
    this.classification = null;
  }

  /** Returns true if field classification is set (has been assigned a value) and false otherwise */
  public boolean isSetClassification() {
    return this.classification != null;
  }

  public void setClassificationIsSet(boolean value) {
    if (!value) {
      this.classification = null;
    }
  }

  public String getRemark() {
    return this.remark;
  }

  public TableColumn setRemark(String remark) {
    this.remark = remark;
    return this;
  }

  public void unsetRemark() {
    this.remark = null;
  }

  /** Returns true if field remark is set (has been assigned a value) and false otherwise */
  public boolean isSetRemark() {
    return this.remark != null;
  }

  public void setRemarkIsSet(boolean value) {
    if (!value) {
      this.remark = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((Integer)value);
      }
      break;

    case TYPE_NAME:
      if (value == null) {
        unsetTypeName();
      } else {
        setTypeName((String)value);
      }
      break;

    case IS_AUTO_INCREMENT:
      if (value == null) {
        unsetIsAutoIncrement();
      } else {
        setIsAutoIncrement((String)value);
      }
      break;

    case IS_NULLABLE:
      if (value == null) {
        unsetIsNullable();
      } else {
        setIsNullable((String)value);
      }
      break;

    case CLASSIFICATION:
      if (value == null) {
        unsetClassification();
      } else {
        setClassification((String)value);
      }
      break;

    case REMARK:
      if (value == null) {
        unsetRemark();
      } else {
        setRemark((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case NAME:
      return getName();

    case TYPE:
      return getType();

    case TYPE_NAME:
      return getTypeName();

    case IS_AUTO_INCREMENT:
      return getIsAutoIncrement();

    case IS_NULLABLE:
      return getIsNullable();

    case CLASSIFICATION:
      return getClassification();

    case REMARK:
      return getRemark();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case NAME:
      return isSetName();
    case TYPE:
      return isSetType();
    case TYPE_NAME:
      return isSetTypeName();
    case IS_AUTO_INCREMENT:
      return isSetIsAutoIncrement();
    case IS_NULLABLE:
      return isSetIsNullable();
    case CLASSIFICATION:
      return isSetClassification();
    case REMARK:
      return isSetRemark();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TableColumn)
      return this.equals((TableColumn)that);
    return false;
  }

  public boolean equals(TableColumn that) {
    if (that == null)
      return false;

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_type = true;
    boolean that_present_type = true;
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (this.type != that.type)
        return false;
    }

    boolean this_present_typeName = true && this.isSetTypeName();
    boolean that_present_typeName = true && that.isSetTypeName();
    if (this_present_typeName || that_present_typeName) {
      if (!(this_present_typeName && that_present_typeName))
        return false;
      if (!this.typeName.equals(that.typeName))
        return false;
    }

    boolean this_present_isAutoIncrement = true && this.isSetIsAutoIncrement();
    boolean that_present_isAutoIncrement = true && that.isSetIsAutoIncrement();
    if (this_present_isAutoIncrement || that_present_isAutoIncrement) {
      if (!(this_present_isAutoIncrement && that_present_isAutoIncrement))
        return false;
      if (!this.isAutoIncrement.equals(that.isAutoIncrement))
        return false;
    }

    boolean this_present_isNullable = true && this.isSetIsNullable();
    boolean that_present_isNullable = true && that.isSetIsNullable();
    if (this_present_isNullable || that_present_isNullable) {
      if (!(this_present_isNullable && that_present_isNullable))
        return false;
      if (!this.isNullable.equals(that.isNullable))
        return false;
    }

    boolean this_present_classification = true && this.isSetClassification();
    boolean that_present_classification = true && that.isSetClassification();
    if (this_present_classification || that_present_classification) {
      if (!(this_present_classification && that_present_classification))
        return false;
      if (!this.classification.equals(that.classification))
        return false;
    }

    boolean this_present_remark = true && this.isSetRemark();
    boolean that_present_remark = true && that.isSetRemark();
    if (this_present_remark || that_present_remark) {
      if (!(this_present_remark && that_present_remark))
        return false;
      if (!this.remark.equals(that.remark))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_name = true && (isSetName());
    list.add(present_name);
    if (present_name)
      list.add(name);

    boolean present_type = true;
    list.add(present_type);
    if (present_type)
      list.add(type);

    boolean present_typeName = true && (isSetTypeName());
    list.add(present_typeName);
    if (present_typeName)
      list.add(typeName);

    boolean present_isAutoIncrement = true && (isSetIsAutoIncrement());
    list.add(present_isAutoIncrement);
    if (present_isAutoIncrement)
      list.add(isAutoIncrement);

    boolean present_isNullable = true && (isSetIsNullable());
    list.add(present_isNullable);
    if (present_isNullable)
      list.add(isNullable);

    boolean present_classification = true && (isSetClassification());
    list.add(present_classification);
    if (present_classification)
      list.add(classification);

    boolean present_remark = true && (isSetRemark());
    list.add(present_remark);
    if (present_remark)
      list.add(remark);

    return list.hashCode();
  }

  @Override
  public int compareTo(TableColumn other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTypeName()).compareTo(other.isSetTypeName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTypeName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.typeName, other.typeName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsAutoIncrement()).compareTo(other.isSetIsAutoIncrement());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsAutoIncrement()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isAutoIncrement, other.isAutoIncrement);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsNullable()).compareTo(other.isSetIsNullable());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsNullable()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isNullable, other.isNullable);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClassification()).compareTo(other.isSetClassification());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClassification()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.classification, other.classification);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRemark()).compareTo(other.isSetRemark());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemark()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remark, other.remark);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TableColumn(");
    boolean first = true;

    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("type:");
    sb.append(this.type);
    first = false;
    if (!first) sb.append(", ");
    sb.append("typeName:");
    if (this.typeName == null) {
      sb.append("null");
    } else {
      sb.append(this.typeName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("isAutoIncrement:");
    if (this.isAutoIncrement == null) {
      sb.append("null");
    } else {
      sb.append(this.isAutoIncrement);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("isNullable:");
    if (this.isNullable == null) {
      sb.append("null");
    } else {
      sb.append(this.isNullable);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("classification:");
    if (this.classification == null) {
      sb.append("null");
    } else {
      sb.append(this.classification);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("remark:");
    if (this.remark == null) {
      sb.append("null");
    } else {
      sb.append(this.remark);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TableColumnStandardSchemeFactory implements SchemeFactory {
    public TableColumnStandardScheme getScheme() {
      return new TableColumnStandardScheme();
    }
  }

  private static class TableColumnStandardScheme extends StandardScheme<TableColumn> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TableColumn struct) throws TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.type = iprot.readI32();
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TYPE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.typeName = iprot.readString();
              struct.setTypeNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // IS_AUTO_INCREMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.isAutoIncrement = iprot.readString();
              struct.setIsAutoIncrementIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // IS_NULLABLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.isNullable = iprot.readString();
              struct.setIsNullableIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CLASSIFICATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.classification = iprot.readString();
              struct.setClassificationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // REMARK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.remark = iprot.readString();
              struct.setRemarkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TableColumn struct) throws TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TYPE_FIELD_DESC);
      oprot.writeI32(struct.type);
      oprot.writeFieldEnd();
      if (struct.typeName != null) {
        oprot.writeFieldBegin(TYPE_NAME_FIELD_DESC);
        oprot.writeString(struct.typeName);
        oprot.writeFieldEnd();
      }
      if (struct.isAutoIncrement != null) {
        oprot.writeFieldBegin(IS_AUTO_INCREMENT_FIELD_DESC);
        oprot.writeString(struct.isAutoIncrement);
        oprot.writeFieldEnd();
      }
      if (struct.isNullable != null) {
        oprot.writeFieldBegin(IS_NULLABLE_FIELD_DESC);
        oprot.writeString(struct.isNullable);
        oprot.writeFieldEnd();
      }
      if (struct.classification != null) {
        oprot.writeFieldBegin(CLASSIFICATION_FIELD_DESC);
        oprot.writeString(struct.classification);
        oprot.writeFieldEnd();
      }
      if (struct.remark != null) {
        oprot.writeFieldBegin(REMARK_FIELD_DESC);
        oprot.writeString(struct.remark);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TableColumnTupleSchemeFactory implements SchemeFactory {
    public TableColumnTupleScheme getScheme() {
      return new TableColumnTupleScheme();
    }
  }

  private static class TableColumnTupleScheme extends TupleScheme<TableColumn> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TableColumn struct) throws TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetName()) {
        optionals.set(0);
      }
      if (struct.isSetType()) {
        optionals.set(1);
      }
      if (struct.isSetTypeName()) {
        optionals.set(2);
      }
      if (struct.isSetIsAutoIncrement()) {
        optionals.set(3);
      }
      if (struct.isSetIsNullable()) {
        optionals.set(4);
      }
      if (struct.isSetClassification()) {
        optionals.set(5);
      }
      if (struct.isSetRemark()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetType()) {
        oprot.writeI32(struct.type);
      }
      if (struct.isSetTypeName()) {
        oprot.writeString(struct.typeName);
      }
      if (struct.isSetIsAutoIncrement()) {
        oprot.writeString(struct.isAutoIncrement);
      }
      if (struct.isSetIsNullable()) {
        oprot.writeString(struct.isNullable);
      }
      if (struct.isSetClassification()) {
        oprot.writeString(struct.classification);
      }
      if (struct.isSetRemark()) {
        oprot.writeString(struct.remark);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TableColumn struct) throws TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.type = iprot.readI32();
        struct.setTypeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.typeName = iprot.readString();
        struct.setTypeNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.isAutoIncrement = iprot.readString();
        struct.setIsAutoIncrementIsSet(true);
      }
      if (incoming.get(4)) {
        struct.isNullable = iprot.readString();
        struct.setIsNullableIsSet(true);
      }
      if (incoming.get(5)) {
        struct.classification = iprot.readString();
        struct.setClassificationIsSet(true);
      }
      if (incoming.get(6)) {
        struct.remark = iprot.readString();
        struct.setRemarkIsSet(true);
      }
    }
  }

}

