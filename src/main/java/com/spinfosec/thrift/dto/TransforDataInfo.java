/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.spinfosec.thrift.dto;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-11-30")
public class TransforDataInfo implements org.apache.thrift.TBase<TransforDataInfo, TransforDataInfo._Fields>, java.io.Serializable, Cloneable, Comparable<TransforDataInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TransforDataInfo");

  private static final org.apache.thrift.protocol.TField JOB_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("jobId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField FILE_CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("fileContent", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField FILE_TEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("fileText", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField FILE_METADATA_FIELD_DESC = new org.apache.thrift.protocol.TField("fileMetadata", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField TABLE_CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("tableContent", org.apache.thrift.protocol.TType.STRUCT, (short)5);
  private static final org.apache.thrift.protocol.TField TABLE_BINARY_CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("tableBinaryContent", org.apache.thrift.protocol.TType.STRUCT, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TransforDataInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TransforDataInfoTupleSchemeFactory());
  }

  public String jobId; // required
  public ByteBuffer fileContent; // required
  public String fileText; // required
  public FileMetadata fileMetadata; // required
  public TableContent tableContent; // required
  public TableBinaryContent tableBinaryContent; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    JOB_ID((short)1, "jobId"),
    FILE_CONTENT((short)2, "fileContent"),
    FILE_TEXT((short)3, "fileText"),
    FILE_METADATA((short)4, "fileMetadata"),
    TABLE_CONTENT((short)5, "tableContent"),
    TABLE_BINARY_CONTENT((short)6, "tableBinaryContent");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // JOB_ID
          return JOB_ID;
        case 2: // FILE_CONTENT
          return FILE_CONTENT;
        case 3: // FILE_TEXT
          return FILE_TEXT;
        case 4: // FILE_METADATA
          return FILE_METADATA;
        case 5: // TABLE_CONTENT
          return TABLE_CONTENT;
        case 6: // TABLE_BINARY_CONTENT
          return TABLE_BINARY_CONTENT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.JOB_ID, new org.apache.thrift.meta_data.FieldMetaData("jobId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FILE_CONTENT, new org.apache.thrift.meta_data.FieldMetaData("fileContent", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.FILE_TEXT, new org.apache.thrift.meta_data.FieldMetaData("fileText", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FILE_METADATA, new org.apache.thrift.meta_data.FieldMetaData("fileMetadata", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FileMetadata.class)));
    tmpMap.put(_Fields.TABLE_CONTENT, new org.apache.thrift.meta_data.FieldMetaData("tableContent", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TableContent.class)));
    tmpMap.put(_Fields.TABLE_BINARY_CONTENT, new org.apache.thrift.meta_data.FieldMetaData("tableBinaryContent", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TableBinaryContent.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TransforDataInfo.class, metaDataMap);
  }

  public TransforDataInfo() {
  }

  public TransforDataInfo(
    String jobId,
    ByteBuffer fileContent,
    String fileText,
    FileMetadata fileMetadata,
    TableContent tableContent,
    TableBinaryContent tableBinaryContent)
  {
    this();
    this.jobId = jobId;
    this.fileContent = org.apache.thrift.TBaseHelper.copyBinary(fileContent);
    this.fileText = fileText;
    this.fileMetadata = fileMetadata;
    this.tableContent = tableContent;
    this.tableBinaryContent = tableBinaryContent;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TransforDataInfo(TransforDataInfo other) {
    if (other.isSetJobId()) {
      this.jobId = other.jobId;
    }
    if (other.isSetFileContent()) {
      this.fileContent = org.apache.thrift.TBaseHelper.copyBinary(other.fileContent);
    }
    if (other.isSetFileText()) {
      this.fileText = other.fileText;
    }
    if (other.isSetFileMetadata()) {
      this.fileMetadata = new FileMetadata(other.fileMetadata);
    }
    if (other.isSetTableContent()) {
      this.tableContent = new TableContent(other.tableContent);
    }
    if (other.isSetTableBinaryContent()) {
      this.tableBinaryContent = new TableBinaryContent(other.tableBinaryContent);
    }
  }

  public TransforDataInfo deepCopy() {
    return new TransforDataInfo(this);
  }

  @Override
  public void clear() {
    this.jobId = null;
    this.fileContent = null;
    this.fileText = null;
    this.fileMetadata = null;
    this.tableContent = null;
    this.tableBinaryContent = null;
  }

  public String getJobId() {
    return this.jobId;
  }

  public TransforDataInfo setJobId(String jobId) {
    this.jobId = jobId;
    return this;
  }

  public void unsetJobId() {
    this.jobId = null;
  }

  /** Returns true if field jobId is set (has been assigned a value) and false otherwise */
  public boolean isSetJobId() {
    return this.jobId != null;
  }

  public void setJobIdIsSet(boolean value) {
    if (!value) {
      this.jobId = null;
    }
  }

  public byte[] getFileContent() {
    setFileContent(org.apache.thrift.TBaseHelper.rightSize(fileContent));
    return fileContent == null ? null : fileContent.array();
  }

  public ByteBuffer bufferForFileContent() {
    return org.apache.thrift.TBaseHelper.copyBinary(fileContent);
  }

  public TransforDataInfo setFileContent(byte[] fileContent) {
    this.fileContent = fileContent == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(fileContent, fileContent.length));
    return this;
  }

  public TransforDataInfo setFileContent(ByteBuffer fileContent) {
    this.fileContent = org.apache.thrift.TBaseHelper.copyBinary(fileContent);
    return this;
  }

  public void unsetFileContent() {
    this.fileContent = null;
  }

  /** Returns true if field fileContent is set (has been assigned a value) and false otherwise */
  public boolean isSetFileContent() {
    return this.fileContent != null;
  }

  public void setFileContentIsSet(boolean value) {
    if (!value) {
      this.fileContent = null;
    }
  }

  public String getFileText() {
    return this.fileText;
  }

  public TransforDataInfo setFileText(String fileText) {
    this.fileText = fileText;
    return this;
  }

  public void unsetFileText() {
    this.fileText = null;
  }

  /** Returns true if field fileText is set (has been assigned a value) and false otherwise */
  public boolean isSetFileText() {
    return this.fileText != null;
  }

  public void setFileTextIsSet(boolean value) {
    if (!value) {
      this.fileText = null;
    }
  }

  public FileMetadata getFileMetadata() {
    return this.fileMetadata;
  }

  public TransforDataInfo setFileMetadata(FileMetadata fileMetadata) {
    this.fileMetadata = fileMetadata;
    return this;
  }

  public void unsetFileMetadata() {
    this.fileMetadata = null;
  }

  /** Returns true if field fileMetadata is set (has been assigned a value) and false otherwise */
  public boolean isSetFileMetadata() {
    return this.fileMetadata != null;
  }

  public void setFileMetadataIsSet(boolean value) {
    if (!value) {
      this.fileMetadata = null;
    }
  }

  public TableContent getTableContent() {
    return this.tableContent;
  }

  public TransforDataInfo setTableContent(TableContent tableContent) {
    this.tableContent = tableContent;
    return this;
  }

  public void unsetTableContent() {
    this.tableContent = null;
  }

  /** Returns true if field tableContent is set (has been assigned a value) and false otherwise */
  public boolean isSetTableContent() {
    return this.tableContent != null;
  }

  public void setTableContentIsSet(boolean value) {
    if (!value) {
      this.tableContent = null;
    }
  }

  public TableBinaryContent getTableBinaryContent() {
    return this.tableBinaryContent;
  }

  public TransforDataInfo setTableBinaryContent(TableBinaryContent tableBinaryContent) {
    this.tableBinaryContent = tableBinaryContent;
    return this;
  }

  public void unsetTableBinaryContent() {
    this.tableBinaryContent = null;
  }

  /** Returns true if field tableBinaryContent is set (has been assigned a value) and false otherwise */
  public boolean isSetTableBinaryContent() {
    return this.tableBinaryContent != null;
  }

  public void setTableBinaryContentIsSet(boolean value) {
    if (!value) {
      this.tableBinaryContent = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case JOB_ID:
      if (value == null) {
        unsetJobId();
      } else {
        setJobId((String)value);
      }
      break;

    case FILE_CONTENT:
      if (value == null) {
        unsetFileContent();
      } else {
        setFileContent((ByteBuffer)value);
      }
      break;

    case FILE_TEXT:
      if (value == null) {
        unsetFileText();
      } else {
        setFileText((String)value);
      }
      break;

    case FILE_METADATA:
      if (value == null) {
        unsetFileMetadata();
      } else {
        setFileMetadata((FileMetadata)value);
      }
      break;

    case TABLE_CONTENT:
      if (value == null) {
        unsetTableContent();
      } else {
        setTableContent((TableContent)value);
      }
      break;

    case TABLE_BINARY_CONTENT:
      if (value == null) {
        unsetTableBinaryContent();
      } else {
        setTableBinaryContent((TableBinaryContent)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case JOB_ID:
      return getJobId();

    case FILE_CONTENT:
      return getFileContent();

    case FILE_TEXT:
      return getFileText();

    case FILE_METADATA:
      return getFileMetadata();

    case TABLE_CONTENT:
      return getTableContent();

    case TABLE_BINARY_CONTENT:
      return getTableBinaryContent();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case JOB_ID:
      return isSetJobId();
    case FILE_CONTENT:
      return isSetFileContent();
    case FILE_TEXT:
      return isSetFileText();
    case FILE_METADATA:
      return isSetFileMetadata();
    case TABLE_CONTENT:
      return isSetTableContent();
    case TABLE_BINARY_CONTENT:
      return isSetTableBinaryContent();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TransforDataInfo)
      return this.equals((TransforDataInfo)that);
    return false;
  }

  public boolean equals(TransforDataInfo that) {
    if (that == null)
      return false;

    boolean this_present_jobId = true && this.isSetJobId();
    boolean that_present_jobId = true && that.isSetJobId();
    if (this_present_jobId || that_present_jobId) {
      if (!(this_present_jobId && that_present_jobId))
        return false;
      if (!this.jobId.equals(that.jobId))
        return false;
    }

    boolean this_present_fileContent = true && this.isSetFileContent();
    boolean that_present_fileContent = true && that.isSetFileContent();
    if (this_present_fileContent || that_present_fileContent) {
      if (!(this_present_fileContent && that_present_fileContent))
        return false;
      if (!this.fileContent.equals(that.fileContent))
        return false;
    }

    boolean this_present_fileText = true && this.isSetFileText();
    boolean that_present_fileText = true && that.isSetFileText();
    if (this_present_fileText || that_present_fileText) {
      if (!(this_present_fileText && that_present_fileText))
        return false;
      if (!this.fileText.equals(that.fileText))
        return false;
    }

    boolean this_present_fileMetadata = true && this.isSetFileMetadata();
    boolean that_present_fileMetadata = true && that.isSetFileMetadata();
    if (this_present_fileMetadata || that_present_fileMetadata) {
      if (!(this_present_fileMetadata && that_present_fileMetadata))
        return false;
      if (!this.fileMetadata.equals(that.fileMetadata))
        return false;
    }

    boolean this_present_tableContent = true && this.isSetTableContent();
    boolean that_present_tableContent = true && that.isSetTableContent();
    if (this_present_tableContent || that_present_tableContent) {
      if (!(this_present_tableContent && that_present_tableContent))
        return false;
      if (!this.tableContent.equals(that.tableContent))
        return false;
    }

    boolean this_present_tableBinaryContent = true && this.isSetTableBinaryContent();
    boolean that_present_tableBinaryContent = true && that.isSetTableBinaryContent();
    if (this_present_tableBinaryContent || that_present_tableBinaryContent) {
      if (!(this_present_tableBinaryContent && that_present_tableBinaryContent))
        return false;
      if (!this.tableBinaryContent.equals(that.tableBinaryContent))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_jobId = true && (isSetJobId());
    list.add(present_jobId);
    if (present_jobId)
      list.add(jobId);

    boolean present_fileContent = true && (isSetFileContent());
    list.add(present_fileContent);
    if (present_fileContent)
      list.add(fileContent);

    boolean present_fileText = true && (isSetFileText());
    list.add(present_fileText);
    if (present_fileText)
      list.add(fileText);

    boolean present_fileMetadata = true && (isSetFileMetadata());
    list.add(present_fileMetadata);
    if (present_fileMetadata)
      list.add(fileMetadata);

    boolean present_tableContent = true && (isSetTableContent());
    list.add(present_tableContent);
    if (present_tableContent)
      list.add(tableContent);

    boolean present_tableBinaryContent = true && (isSetTableBinaryContent());
    list.add(present_tableBinaryContent);
    if (present_tableBinaryContent)
      list.add(tableBinaryContent);

    return list.hashCode();
  }

  @Override
  public int compareTo(TransforDataInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetJobId()).compareTo(other.isSetJobId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJobId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobId, other.jobId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFileContent()).compareTo(other.isSetFileContent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFileContent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileContent, other.fileContent);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFileText()).compareTo(other.isSetFileText());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFileText()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileText, other.fileText);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFileMetadata()).compareTo(other.isSetFileMetadata());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFileMetadata()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileMetadata, other.fileMetadata);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTableContent()).compareTo(other.isSetTableContent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTableContent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableContent, other.tableContent);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTableBinaryContent()).compareTo(other.isSetTableBinaryContent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTableBinaryContent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableBinaryContent, other.tableBinaryContent);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TransforDataInfo(");
    boolean first = true;

    sb.append("jobId:");
    if (this.jobId == null) {
      sb.append("null");
    } else {
      sb.append(this.jobId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fileContent:");
    if (this.fileContent == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.fileContent, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fileText:");
    if (this.fileText == null) {
      sb.append("null");
    } else {
      sb.append(this.fileText);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fileMetadata:");
    if (this.fileMetadata == null) {
      sb.append("null");
    } else {
      sb.append(this.fileMetadata);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tableContent:");
    if (this.tableContent == null) {
      sb.append("null");
    } else {
      sb.append(this.tableContent);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tableBinaryContent:");
    if (this.tableBinaryContent == null) {
      sb.append("null");
    } else {
      sb.append(this.tableBinaryContent);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check for sub-struct validity
    if (fileMetadata != null) {
      fileMetadata.validate();
    }
    if (tableContent != null) {
      tableContent.validate();
    }
    if (tableBinaryContent != null) {
      tableBinaryContent.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TransforDataInfoStandardSchemeFactory implements SchemeFactory {
    public TransforDataInfoStandardScheme getScheme() {
      return new TransforDataInfoStandardScheme();
    }
  }

  private static class TransforDataInfoStandardScheme extends StandardScheme<TransforDataInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TransforDataInfo struct) throws TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // JOB_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.jobId = iprot.readString();
              struct.setJobIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FILE_CONTENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fileContent = iprot.readBinary();
              struct.setFileContentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // FILE_TEXT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fileText = iprot.readString();
              struct.setFileTextIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // FILE_METADATA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.fileMetadata = new FileMetadata();
              struct.fileMetadata.read(iprot);
              struct.setFileMetadataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TABLE_CONTENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.tableContent = new TableContent();
              struct.tableContent.read(iprot);
              struct.setTableContentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TABLE_BINARY_CONTENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.tableBinaryContent = new TableBinaryContent();
              struct.tableBinaryContent.read(iprot);
              struct.setTableBinaryContentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TransforDataInfo struct) throws TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.jobId != null) {
        oprot.writeFieldBegin(JOB_ID_FIELD_DESC);
        oprot.writeString(struct.jobId);
        oprot.writeFieldEnd();
      }
      if (struct.fileContent != null) {
        oprot.writeFieldBegin(FILE_CONTENT_FIELD_DESC);
        oprot.writeBinary(struct.fileContent);
        oprot.writeFieldEnd();
      }
      if (struct.fileText != null) {
        oprot.writeFieldBegin(FILE_TEXT_FIELD_DESC);
        oprot.writeString(struct.fileText);
        oprot.writeFieldEnd();
      }
      if (struct.fileMetadata != null) {
        oprot.writeFieldBegin(FILE_METADATA_FIELD_DESC);
        struct.fileMetadata.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.tableContent != null) {
        oprot.writeFieldBegin(TABLE_CONTENT_FIELD_DESC);
        struct.tableContent.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.tableBinaryContent != null) {
        oprot.writeFieldBegin(TABLE_BINARY_CONTENT_FIELD_DESC);
        struct.tableBinaryContent.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TransforDataInfoTupleSchemeFactory implements SchemeFactory {
    public TransforDataInfoTupleScheme getScheme() {
      return new TransforDataInfoTupleScheme();
    }
  }

  private static class TransforDataInfoTupleScheme extends TupleScheme<TransforDataInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TransforDataInfo struct) throws TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetJobId()) {
        optionals.set(0);
      }
      if (struct.isSetFileContent()) {
        optionals.set(1);
      }
      if (struct.isSetFileText()) {
        optionals.set(2);
      }
      if (struct.isSetFileMetadata()) {
        optionals.set(3);
      }
      if (struct.isSetTableContent()) {
        optionals.set(4);
      }
      if (struct.isSetTableBinaryContent()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetJobId()) {
        oprot.writeString(struct.jobId);
      }
      if (struct.isSetFileContent()) {
        oprot.writeBinary(struct.fileContent);
      }
      if (struct.isSetFileText()) {
        oprot.writeString(struct.fileText);
      }
      if (struct.isSetFileMetadata()) {
        struct.fileMetadata.write(oprot);
      }
      if (struct.isSetTableContent()) {
        struct.tableContent.write(oprot);
      }
      if (struct.isSetTableBinaryContent()) {
        struct.tableBinaryContent.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TransforDataInfo struct) throws TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.jobId = iprot.readString();
        struct.setJobIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.fileContent = iprot.readBinary();
        struct.setFileContentIsSet(true);
      }
      if (incoming.get(2)) {
        struct.fileText = iprot.readString();
        struct.setFileTextIsSet(true);
      }
      if (incoming.get(3)) {
        struct.fileMetadata = new FileMetadata();
        struct.fileMetadata.read(iprot);
        struct.setFileMetadataIsSet(true);
      }
      if (incoming.get(4)) {
        struct.tableContent = new TableContent();
        struct.tableContent.read(iprot);
        struct.setTableContentIsSet(true);
      }
      if (incoming.get(5)) {
        struct.tableBinaryContent = new TableBinaryContent();
        struct.tableBinaryContent.read(iprot);
        struct.setTableBinaryContentIsSet(true);
      }
    }
  }

}

